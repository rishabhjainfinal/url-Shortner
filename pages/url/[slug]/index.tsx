import FormCustom from "@/components/FormCustom";
import FrameDiv from "@/components/FrameDiv";
import NavTop from "@/components/NavTop";
import NavUser from "@/components/NavUser";
import { Session } from "next-auth";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { getUrl } from "../../../utils/dbActions";
import { tableData } from "@/utils/types";
import { useEffect, useState } from "react";
import { useTheme } from "next-themes";
import { motion } from "framer-motion";
import { toast } from "react-toastify";
import Link from "next/link";

export default function Index({ data }: { data: tableData }) {
	const router = useRouter();
	const { theme } = useTheme();
	const [rotate, setRotate] = useState(0);

	// if user is not authenticated, redirect to signin page
	const { data: session } = useSession();

	useEffect(() => {
		if (!session) {
			router.push("/auth/signin");
		}
		// console.log(data);
	});

	return (
		<>
			<Head>
				<title>Show Url</title>
				<meta name="description" content="Generated by Show Url" />
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<NavTop />
				<NavUser name={session?.user?.name as string} />
				<FrameDiv>
					{data && JSON.stringify(data) !== "{}" ? (
						<div className="relative ">
							<h1 className="text-2xl">
								<span className="font-bold">{data.slug}</span>
								{" --> "}
								<span className="font-bold">{data.url}</span>
							</h1>
							<FormCustom
								id={data.id}
								toUrl={data.url}
								code={data.slug}
								session={session as Session}
								action="Update"
							/>
							{/* delete btn for the entry and notify */}
							{/* delete icon svg */}
							<motion.div
								className="absolute cursor-pointer top-0 right-0"
								onTap={() => {
									setRotate((e) => e + 360);
								}}
								animate={{
									rotate: rotate,
								}}
							>
								<svg
									onClick={async () => {
										// notify
										toast.error("Deleting the entry...");
										// del the entry
										await fetch(`/api/url/`, {
											method: "DELETE",
											body: JSON.stringify({
												id: data.id,
											}),
											headers: {
												"Content-Type":
													"application/json",
											},
										});
										// console.log(res);
										// redirect to home
										router.back();
									}}
									fill={
										theme === "dark"
											? "#ffffff7a"
											: "#0000007a"
									}
									width="30px"
									height="30px"
									viewBox="0 0 482.428 482.429"
								>
									<g>
										<path
											d="M381.163,57.799h-75.094C302.323,25.316,274.686,0,241.214,0c-33.471,0-61.104,25.315-64.85,57.799h-75.098
											c-30.39,0-55.111,24.728-55.111,55.117v2.828c0,23.223,14.46,43.1,34.83,51.199v260.369c0,30.39,24.724,55.117,55.112,55.117
											h210.236c30.389,0,55.111-24.729,55.111-55.117V166.944c20.369-8.1,34.83-27.977,34.83-51.199v-2.828
											C436.274,82.527,411.551,57.799,381.163,57.799z M241.214,26.139c19.037,0,34.927,13.645,38.443,31.66h-76.879
											C206.293,39.783,222.184,26.139,241.214,26.139z M375.305,427.312c0,15.978-13,28.979-28.973,28.979H136.096
											c-15.973,0-28.973-13.002-28.973-28.979V170.861h268.182V427.312z M410.135,115.744c0,15.978-13,28.979-28.973,28.979H101.266
											c-15.973,0-28.973-13.001-28.973-28.979v-2.828c0-15.978,13-28.979,28.973-28.979h279.897c15.973,0,28.973,13.001,28.973,28.979
											V115.744z"
										/>
										<path
											d="M171.144,422.863c7.218,0,13.069-5.853,13.069-13.068V262.641c0-7.216-5.852-13.07-13.069-13.07
											c-7.217,0-13.069,5.854-13.069,13.07v147.154C158.074,417.012,163.926,422.863,171.144,422.863z"
										/>
										<path
											d="M241.214,422.863c7.218,0,13.07-5.853,13.07-13.068V262.641c0-7.216-5.854-13.07-13.07-13.07
											c-7.217,0-13.069,5.854-13.069,13.07v147.154C228.145,417.012,233.996,422.863,241.214,422.863z"
										/>
										<path
											d="M311.284,422.863c7.217,0,13.068-5.853,13.068-13.068V262.641c0-7.216-5.852-13.07-13.068-13.07
											c-7.219,0-13.07,5.854-13.07,13.07v147.154C298.213,417.012,304.067,422.863,311.284,422.863z"
										/>
									</g>
								</svg>
							</motion.div>
						</div>
					) : (
						<h1 className="text-2xl text-center">
							404 - Entry Not Found
							<div className="flex justify-center p-20 text-2xl text-silver">
								<Link
									href="/"
									className="cointainerBtn bg-btnGrey boxShadow"
								>
									<motion.div whileTap={{ scale: 0.95 }}>
										<button>Go Back Home</button>
									</motion.div>
								</Link>
							</div>
						</h1>
					)}
				</FrameDiv>
			</main>
		</>
	);
}

// get server side props and show last 5-10 post
export async function getServerSideProps(context: any) {
	const { slug } = context.query;
	const { data, error } = await getUrl(slug);
	// console.log("server side rendered props", data, error);
	if (JSON.stringify(error) !== "{}") {
		return {
			props: {
				data: {},
			}, // will be passed to the page component as props
		};
	}

	return {
		props: {
			data: JSON.parse(JSON.stringify(data)),
		}, // will be passed to the page component as props
	};
}
